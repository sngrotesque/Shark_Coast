#include <crypto/fea.hpp>

static const wmkcByte sbox[256] = {
    // 0     1     2     3     4     5     6     7     8     9     a     n     c     d     e     f
    0x9f, 0x0e, 0x3b, 0xe0, 0xe2, 0xa4, 0x8d, 0x91, 0x45, 0x77, 0xc7, 0xbf, 0xd8, 0x4c, 0xb4, 0x64,
    0x9a, 0x94, 0xe3, 0x62, 0x21, 0x57, 0x51, 0x66, 0x1a, 0xca, 0x31, 0xb1, 0x29, 0x06, 0x3a, 0xa6,
    0xed, 0x37, 0x85, 0xdf, 0x0a, 0x7f, 0xd6, 0xe6, 0xc2, 0xaf, 0x3d, 0x1d, 0x90, 0x75, 0x7a, 0x55,
    0xb3, 0xf9, 0x86, 0xd5, 0xc9, 0x52, 0x42, 0x74, 0x98, 0x61, 0x36, 0x4f, 0xbe, 0x02, 0x99, 0x84,
    0x50, 0x23, 0x22, 0x6f, 0x65, 0xf6, 0x27, 0x35, 0x8f, 0x97, 0xe4, 0x67, 0x40, 0x32, 0x70, 0xc1,
    0xec, 0xe5, 0x54, 0xef, 0x33, 0x1f, 0x53, 0x95, 0x10, 0xea, 0xd0, 0x14, 0x81, 0x20, 0x8c, 0x11,
    0xf3, 0x4d, 0x09, 0x2a, 0xd3, 0x63, 0x89, 0x59, 0x82, 0xc5, 0x0b, 0x05, 0x13, 0xe7, 0xae, 0xda,
    0x1c, 0xb5, 0x87, 0xff, 0x2b, 0x69, 0x49, 0x18, 0x0c, 0xce, 0x3c, 0x7c, 0x44, 0x5d, 0x71, 0x25,
    0x4b, 0xc3, 0x04, 0x7d, 0x6b, 0x41, 0xab, 0xb2, 0x08, 0x2e, 0x2f, 0x7b, 0x2d, 0xdc, 0xb8, 0x00,
    0x39, 0x03, 0x83, 0x46, 0x9e, 0x88, 0xde, 0x8e, 0xfd, 0xd7, 0xfe, 0x78, 0xd2, 0xf1, 0x0d, 0x0f,
    0x68, 0x16, 0xf5, 0xe9, 0xcc, 0x93, 0xa1, 0x8b, 0xf8, 0x28, 0xc0, 0x6c, 0x8a, 0xe1, 0xf2, 0x5e,
    0x80, 0x5a, 0x9b, 0x6a, 0xbc, 0xcd, 0xcb, 0x6d, 0x17, 0x5b, 0xa5, 0xfb, 0x3e, 0xbd, 0x19, 0x4e,
    0xfa, 0xb7, 0x92, 0xb6, 0xf7, 0x7e, 0xc4, 0x1e, 0x76, 0x24, 0xb9, 0xba, 0x30, 0xb0, 0xa0, 0xdb,
    0x6e, 0xa2, 0x4a, 0x43, 0x2c, 0x73, 0x96, 0xee, 0x48, 0xd1, 0xaa, 0xd9, 0x01, 0x15, 0x72, 0xa8,
    0x3f, 0xad, 0x5c, 0xa9, 0xd4, 0xa7, 0xeb, 0xc6, 0x38, 0xf0, 0xfc, 0xbb, 0x9c, 0xdd, 0x47, 0x1b,
    0x60, 0xe8, 0x07, 0x9d, 0xf4, 0x12, 0x26, 0xc8, 0x34, 0x58, 0xa3, 0x79, 0xcf, 0x5f, 0xac, 0x56
};

static const wmkcByte rsbox[256] = {
    // 0     1     2     3     4     5     6     7     8     9     a     n     c     d     e     f
    0x82, 0x29, 0xa3, 0xc5, 0x1d, 0xb3, 0x4a, 0x17, 0x36, 0xb8, 0xf5, 0xc0, 0xdb, 0xfe, 0x4e, 0xca,
    0x66, 0xf3, 0xb0, 0x3b, 0xee, 0x9e, 0x00, 0x94, 0x5e, 0x9b, 0x77, 0xdc, 0xb1, 0x5c, 0xe6, 0xab,
    0x47, 0x93, 0xeb, 0xbb, 0x78, 0x0d, 0x56, 0xd4, 0xc8, 0xd8, 0x65, 0xe5, 0xfd, 0x42, 0x40, 0xd1,
    0x14, 0xbd, 0x21, 0x98, 0x7c, 0x50, 0xea, 0x97, 0x60, 0x45, 0x8b, 0x03, 0xe4, 0x69, 0x2e, 0x6f,
    0x70, 0x3e, 0xff, 0xe1, 0xa9, 0xb6, 0x28, 0xed, 0xad, 0x11, 0xe2, 0x86, 0x19, 0xc9, 0xcc, 0x07,
    0x4d, 0x7f, 0x76, 0x4f, 0x57, 0x5d, 0xe3, 0x6c, 0xda, 0xbc, 0x88, 0x02, 0x41, 0x8e, 0x0b, 0x08,
    0xb5, 0x89, 0x7a, 0xf4, 0xaf, 0xac, 0xbf, 0xbe, 0x1e, 0x58, 0xf7, 0xb7, 0x99, 0x8a, 0xd0, 0x1b,
    0xa5, 0x4b, 0x61, 0x43, 0x68, 0x18, 0xe8, 0x7d, 0xa7, 0x2a, 0xc6, 0x0c, 0xb4, 0x67, 0xa2, 0x34,
    0x87, 0xd2, 0xe9, 0x31, 0xfa, 0x25, 0x80, 0x59, 0xc1, 0xa6, 0x09, 0xcf, 0x83, 0x79, 0xfc, 0x3f,
    0x9c, 0xa4, 0xf9, 0x96, 0xf6, 0xde, 0x37, 0x3a, 0x1a, 0xf2, 0x3d, 0x63, 0xe0, 0x23, 0xcd, 0x04,
    0xb9, 0x74, 0x90, 0x5f, 0x7b, 0xdf, 0x1c, 0xcb, 0x27, 0x2c, 0xc7, 0xd3, 0xf1, 0xd5, 0x30, 0xce,
    0x6d, 0x5a, 0x9d, 0x26, 0xa0, 0x15, 0xfb, 0x0a, 0x55, 0x44, 0x91, 0x38, 0x84, 0x6e, 0x35, 0xf8,
    0x4c, 0x22, 0x39, 0x2d, 0x95, 0xae, 0x20, 0x16, 0x48, 0xd7, 0xba, 0xaa, 0x10, 0x05, 0xd9, 0x01,
    0x49, 0x8f, 0xa8, 0x33, 0xa1, 0x2b, 0x32, 0x12, 0x81, 0x8c, 0xdd, 0x9a, 0xc4, 0x3c, 0x7e, 0xc3,
    0x71, 0x85, 0xe7, 0x92, 0x1f, 0x2f, 0x6a, 0xef, 0x62, 0x72, 0x0e, 0x6b, 0x9f, 0xb2, 0x53, 0xf0,
    0x8d, 0x51, 0x24, 0x73, 0x13, 0x0f, 0xd6, 0x5b, 0xc2, 0x64, 0x52, 0x46, 0xec, 0x54, 0x06, 0x75
};

// 按位循环左移3位
#define WMKC_FEA_SHIFT_BITS_L(x) (((x >> 5) | (x << 3)) & 0xff)
// 按位循环右移3位
#define WMKC_FEA_SHIFT_BITS_R(x) (((x << 5) | (x >> 3)) & 0xff)

#define WMKC_FEA_SBOX(x)  (sbox[(x)])
#define WMKC_FEA_RSBOX(x) (rsbox[(x)])

wmkcVoid wmkcCrypto::wmkcFEA::subBytes(wmkcByte *block)
{
    for(wmkc_u32 i = 0; i < WMKC_FEA_BLOCKLEN; i += 2) {
        *(block + i) = WMKC_FEA_SBOX(*(block + i));
        *(block + i + 1) = WMKC_FEA_SBOX(*(block + i + 1));
    }
}

wmkcVoid wmkcCrypto::wmkcFEA::invSubBytes(wmkcByte *block)
{
    for(wmkc_u32 i = 0; i < WMKC_FEA_BLOCKLEN; i += 2) {
        *(block + i) = WMKC_FEA_SBOX(*(block + i));
        *(block + i + 1) = WMKC_FEA_SBOX(*(block + i + 1));
    }
}

wmkcVoid wmkcCrypto::wmkcFEA::shiftBits(wmkcByte *block)
{
    for(wmkc_u32 i = 0; i < WMKC_FEA_BLOCKLEN; i += 2) {
        *(block + i) = WMKC_FEA_SHIFT_BITS_L(*(block + i));
        *(block + i + 1) = WMKC_FEA_SHIFT_BITS_L(*(block + i + 1));
    }
}

wmkcVoid wmkcCrypto::wmkcFEA::invShiftBits(wmkcByte *block)
{
    for(wmkc_u32 i = 0; i < WMKC_FEA_BLOCKLEN; i += 2) {
        *(block + i) = WMKC_FEA_SHIFT_BITS_R(*(block + i));
        *(block + i + 1) = WMKC_FEA_SHIFT_BITS_R(*(block + i + 1));
    }
}

wmkcVoid wmkcCrypto::wmkcFEA::shiftRows(wmkcByte *block)
{
    /*
    * b0 ba 8f e4 c4 7c c3 7d
    * ac 18 29 15 d8 ab cd a7
    */
}

wmkcVoid wmkcCrypto::wmkcFEA::invShiftRows(wmkcByte *block)
{
    
}

wmkcVoid wmkcCrypto::wmkcFEA::keyExtension(wmkcByte *key, wmkcByte *iv)
{
    wmkcByte keyBuffer[sizeof(this->key)];
    wmkcByte ivBuffer[sizeof(this->iv)];
    wmkc_u32 rkIndex, index;

    memcpy(keyBuffer, key, sizeof(this->key));
    memcpy(ivBuffer, iv, sizeof(this->iv));

    for(rkIndex = 0; rkIndex < sizeof(this->roundKey); rkIndex += sizeof(this->key)) {
        memcpy(this->roundKey + rkIndex, keyBuffer, sizeof(this->key));

        this->subBytes(keyBuffer);
        this->subBytes(keyBuffer + WMKC_FEA_BLOCKLEN);

        this->xorWithIV(keyBuffer, ivBuffer);
        this->xorWithIV(keyBuffer + WMKC_FEA_BLOCKLEN, ivBuffer);

        for(index = 0; index < WMKC_FEA_BLOCKLEN; ++index) {
            ivBuffer[index] ^= (keyBuffer[index] ^ keyBuffer[index + 16]);
        }

        for(index = 0; index < sizeof(this->key); ++index) {
            keyBuffer[index] ^= \
                ivBuffer[0] ^ ivBuffer[2]  ^ ivBuffer[4]  ^ ivBuffer[6] ^
                ivBuffer[8] ^ ivBuffer[10] ^ ivBuffer[12] ^ ivBuffer[14];
            keyBuffer[index] ^= \
                ivBuffer[1] ^ ivBuffer[3]  ^ ivBuffer[5]  ^ ivBuffer[7] ^
                ivBuffer[9] ^ ivBuffer[11] ^ ivBuffer[13] ^ ivBuffer[15];
            keyBuffer[index] ^= (ivBuffer[index & 15] + index);
        }

        this->subBytes(ivBuffer);
        this->shiftBits(ivBuffer);

        for(index = 0; index < sizeof(this->key); ++index) {
            keyBuffer[index] ^= \
                ivBuffer[0] ^ ivBuffer[2]  ^ ivBuffer[4]  ^ ivBuffer[6] ^
                ivBuffer[8] ^ ivBuffer[10] ^ ivBuffer[12] ^ ivBuffer[14];
            keyBuffer[index] ^= \
                ivBuffer[1] ^ ivBuffer[3]  ^ ivBuffer[5]  ^ ivBuffer[7] ^
                ivBuffer[9] ^ ivBuffer[11] ^ ivBuffer[13] ^ ivBuffer[15];
        }

        this->shiftBits(keyBuffer);
        this->subBytes(keyBuffer);
        this->shiftBits(keyBuffer + WMKC_FEA_BLOCKLEN);
        this->subBytes(keyBuffer + WMKC_FEA_BLOCKLEN);
    }

    wmkcMem_secure(keyBuffer, sizeof(this->key));
    wmkcMem_secure(ivBuffer, sizeof(this->iv));
}

wmkcVoid wmkcCrypto::wmkcFEA::xorWithIV(wmkcByte *block, wmkcByte *iv)
{
    for(wmkc_u32 i = 0; i < WMKC_FEA_BLOCKLEN; i += 2) {
        *(block + i) ^= *(iv + i);
        *(block + i + 1) ^= *(iv + i + 1);
    }
}

wmkcVoid wmkcCrypto::wmkcFEA::cipher(wmkcByte *p, wmkcByte *roundKey)
{
    wmkc_u32 r, i;
    wmkcByte *subkey = wmkcNull;
    for(r = 0; r < WMKC_FEA_NR; ++r) {
        this->subBytes(p);
        subkey = roundKey + (r << 5); // roundKey + r * 32
        for(i = 0; i < WMKC_FEA_BLOCKLEN; ++i) {
            *(p + i) ^= *(subkey + (i & 31)); // subKey[i % 32]
        }
        this->shiftBits(p);
    }
}

wmkcVoid wmkcCrypto::wmkcFEA::invCipher(wmkcByte *p, wmkcByte *roundKey)
{
    
}

wmkcCrypto::wmkcFEA::wmkcFEA(const wmkcByte *key, const wmkcByte *iv, const wmkc_u32 segmentSize)
: key(), iv(), nonce(), roundKey(), segmentSize(segmentSize)
{
    if(!key || !iv) {
        wmkcErr_exception(wmkcErr_ErrNULL, "wmkcCrypto::wmkcFEA::wmkcFEA", "key or iv is NULL.");
    }

    memcpy(this->key, key, sizeof(this->key));
    memcpy(this->iv, iv, sizeof(this->iv));

    this->keyExtension(this->key, this->iv);
}

wmkcCrypto::wmkcFEA::~wmkcFEA()
{
    wmkcMem_secure(this->key, sizeof(this->key));
    wmkcMem_secure(this->iv, sizeof(this->iv));
}

void wmkcCrypto::wmkcFEA::encrypt(wmkcByte *content, wmkcSize size, FEA_XcryptMode mode)
{
    switch(mode) {
        case FEA_XcryptMode::ECB:
            this->cipher(content, this->roundKey);
    }
}

void wmkcCrypto::wmkcFEA::decrypt(wmkcByte *content, wmkcSize size, FEA_XcryptMode mode)
{

}


